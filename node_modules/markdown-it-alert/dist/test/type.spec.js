"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const markdown_it_1 = __importDefault(require("markdown-it"));
const md = new markdown_it_1.default();
md.use(__1.default);
describe("Types", () => {
    it("No type should be rendered", () => __awaiter(void 0, void 0, void 0, function* () {
        const exampleInput = `
:::
This is a default
:::
	`;
        const renderedDocument = md.render(exampleInput);
        expect(renderedDocument).toEqual(`<p>:::
This is a default
:::</p>
`);
    }));
    it("Tip", () => {
        const exampleInput = `
::: tip
This is a tip
:::
	`;
        const renderedDocument = md.render(exampleInput);
        expect(renderedDocument).toEqual(`<div class="alert alert-tip" role="alert">
<p>This is a tip</p>
</div>
`);
    });
    it("Success", () => {
        const exampleInput = `
::: success
This is a success
:::
	`;
        const renderedDocument = md.render(exampleInput);
        expect(renderedDocument).toEqual(`<div class="alert alert-success" role="alert">
<p>This is a success</p>
</div>
`);
    });
    it("Info", () => {
        const exampleInput = `
::: info
This is a info
:::
	`;
        const renderedDocument = md.render(exampleInput);
        expect(renderedDocument).toEqual(`<div class="alert alert-info" role="alert">
<p>This is a info</p>
</div>
`);
    });
    it("Error", () => {
        const exampleInput = `
::: error
This is an Error
:::
	`;
        const renderedDocument = md.render(exampleInput);
        expect(renderedDocument).toEqual(`<div class="alert alert-error" role="alert">
<p>This is an Error</p>
</div>
`);
    });
    it("Danger", () => {
        const exampleInput = `
::: danger
This is a Danger
:::
	`;
        const renderedDocument = md.render(exampleInput);
        expect(renderedDocument).toEqual(`<div class="alert alert-danger" role="alert">
<p>This is a Danger</p>
</div>
`);
    });
});
//# sourceMappingURL=type.spec.js.map