{
  "version": 3,
  "sources": ["../../markdown-it-table/dist/index.mjs"],
  "sourcesContent": ["// src/table.js\nvar LIST_RE = /^ {0,3}(\\d+\\.|\\*|-)$/;\nvar BLOCKQUOTE_RE = /^(?<space> {0,3})>/;\nfunction isSpace(code) {\n  switch (code) {\n    case 9:\n    case 32:\n      return true;\n  }\n  return false;\n}\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent, max = state.eMarks[line];\n  return state.src.substr(pos, max - pos);\n}\nfunction escapedSplit(str) {\n  var result = [], pos = 0, max = str.length, ch, escapes = 0, lastPos = 0, backTicked = false, lastBackTick = 0;\n  ch = str.charCodeAt(pos);\n  while (pos < max) {\n    if (ch === 96) {\n      if (backTicked) {\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 124 && escapes % 2 === 0 && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n    if (ch === 92) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n    pos++;\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n    ch = str.charCodeAt(pos);\n  }\n  result.push(str.substring(lastPos));\n  return result;\n}\nfunction table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines;\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n  nextLine = startLine + 1;\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  }\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 124 && ch !== 45 && ch !== 58) {\n    return false;\n  }\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n    if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {\n      return false;\n    }\n    pos++;\n  }\n  lineText = getLine(state, startLine + 1);\n  columns = lineText.split(\"|\");\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n    if (t.charCodeAt(t.length - 1) === 58) {\n      aligns.push(t.charCodeAt(0) === 58 ? \"center\" : \"right\");\n    } else if (t.charCodeAt(0) === 58) {\n      aligns.push(\"left\");\n    } else {\n      aligns.push(\"\");\n    }\n  }\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf(\"|\") === -1) {\n    return false;\n  }\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, \"\"));\n  columnCount = columns.length;\n  if (columnCount > aligns.length) {\n    return false;\n  }\n  if (silent) {\n    return true;\n  }\n  token = state.push(\"table_open\", \"table\", 1);\n  token.map = tableLines = [startLine, 0];\n  token = state.push(\"tr_open\", \"tr\", 1);\n  token.map = [startLine, startLine + 1];\n  for (i = 0; i < columns.length; i++) {\n    token = state.push(\"th_open\", \"th\", 1);\n    token.map = [startLine, startLine + 1];\n    if (aligns[i]) {\n      token.attrs = [[\"style\", \"text-align:\" + aligns[i]]];\n    }\n    token = state.push(\"paragraph_open\", \"p\", 1);\n    token = state.push(\"inline\", \"\", 0);\n    token.content = columns[i].trim();\n    token.map = [startLine, startLine + 1];\n    token.children = [];\n    token = state.push(\"paragraph_close\", \"p\", -1);\n    token = state.push(\"th_close\", \"th\", -1);\n  }\n  token = state.push(\"tr_close\", \"tr\", -1);\n  token.map = tbodyLines = [startLine + 2, 0];\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf(\"|\") === -1) {\n      break;\n    }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, \"\"));\n    token = state.push(\"tr_open\", \"tr\", 1);\n    for (let i2 = 0, offset = 1; i2 < columns.length; i2++) {\n      token = state.push(\"td_open\", \"td\", 1);\n      if (aligns[i2]) {\n        token.attrs = [[\"style\", \"text-align:\" + aligns[i2]]];\n      }\n      let shift = 0, ret;\n      if (ret = BLOCKQUOTE_RE.exec(columns[i2])) {\n        shift = ret.groups.space.length;\n      } else if (ret = LIST_RE.exec(columns[i2])) {\n        shift = ret.input.length;\n      }\n      state.bMarks[nextLine] += offset + state.tShift[nextLine] + shift;\n      state.tShift[nextLine] = 0;\n      state.sCount[nextLine] = 0;\n      offset = (columns[i2] || \"\").length + 1;\n      state.eMarks[nextLine] = state.bMarks[nextLine] + offset - shift - 1;\n      state.lineMax = 1;\n      state.md.block.tokenize(state, nextLine, nextLine + 1);\n      token = state.push(\"td_close\", \"td\", -1);\n    }\n    token = state.push(\"tr_close\", \"tr\", -1);\n  }\n  token = state.push(\"table_close\", \"table\", -1);\n  tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n}\n\n// src/index.js\nvar markdownItTable = (md, options) => {\n  md.block.ruler.before(\"paragraph\", \"table\", table, {\n    alt: [\"paragraph\", \"reference\"]\n  });\n};\nexport {\n  markdownItTable\n};\n"],
  "mappings": "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",
  "names": []
}
